#pragma experiment("BRIDGE_CONNECT")

import ElectricLogic
import ElectricPower
import I2C
import SPI
import UART_Base
import JTAG
import USB2_0
import Capacitor

from "ruben-iteng/switches/buttons.ato" import ButtonSKRPACE010
from "ruben-iteng/switches/buttons.ato" import ButtonPullup

from "parts/Espressif_Systems_ESP32_S3_WROOM_1_N16R2/Espressif_Systems_ESP32_S3_WROOM_1_N16R2.ato" import Espressif_Systems_ESP32_S3_WROOM_1_N16R2_package


module ESP32_S3_WROOM_1_U_driver from ESP32_S3_WROOM_1_U_driver_base:
    """
    ESP32 S3 WROOM-1 module with build-in antenna and supporting components
    - 32MB flash
    - 2MB PSRAM
    """

    # components
    boot_switch = new ButtonSKRPACE010
    boot_rc_capacitor = new Capacitor
    reset_switch = new ButtonPullup
    reset_rc_capacitor = new Capacitor
    decoupling_capacitor_bulk = new Capacitor
    decoupling_capacitor_small = new Capacitor

    # connections
    power ~ decoupling_capacitor_bulk.power
    power ~ decoupling_capacitor_small.power

    boot_switch.unnamed[0] ~ power.lv
    boot_switch.unnamed[1] ~ gpio[0].line
    boot_switch.unnamed[1] ~> boot_rc_capacitor ~> power.lv

    reset_switch.output.reference ~ power
    reset_switch.output ~ enable
    reset_switch.btn -> ButtonSKRPACE010
    reset_rc_capacitor.power.hv ~ reset_switch.output.line
    reset_rc_capacitor.power.lv ~ reset_switch.output.reference.lv

    # parameters
    reset_rc_capacitor.value = 1uF +/- 20%
    reset_rc_capacitor.package = "C0402"
    decoupling_capacitor_bulk.value = 22uF +/- 20%
    decoupling_capacitor_bulk.package = "C0805"
    decoupling_capacitor_small.value = 100nF +/- 20%
    decoupling_capacitor_small.package = "C0402"


module ESP32_S3_WROOM_1_U_driver_base:
    """
    Espressif ESP32 S3 WROOM-1 module
    - build-in antenna
    - 32MB flash
    - 2MB PSRAM
    """
    package = new Espressif_Systems_ESP32_S3_WROOM_1_N16R2_package

    # external interfaces
    power = new ElectricPower
    i2c = new I2C
    spi = new SPI
    spi_cs = new ElectricLogic
    uart = new UART_Base
    jtag = new JTAG
    enable = new ElectricLogic
    usb = new USB2_0

    gpio = new ElectricLogic[49] # 22-34 are not exposed on the module

    # connections
    gpio[0].line ~ package.IO0 # strapping pin, default pull-up, boot mode
    gpio[1].line ~ package.IO1
    gpio[2].line ~ package.IO2
    gpio[3].line ~ package.IO3 # strapping pin, default pull-down, JTAG source
    gpio[4].line ~ package.IO4
    gpio[5].line ~ package.IO5
    gpio[6].line ~ package.IO6
    gpio[7].line ~ package.IO7
    gpio[8].line ~ package.IO8
    gpio[9].line ~ package.IO9
    gpio[10].line ~ package.IO10
    gpio[11].line ~ package.IO11
    gpio[12].line ~ package.IO12
    gpio[13].line ~ package.IO13
    gpio[14].line ~ package.IO14
    gpio[15].line ~ package.IO15
    gpio[16].line ~ package.IO16
    gpio[17].line ~ package.IO17
    gpio[18].line ~ package.IO18
    gpio[19].line ~ package.IO19
    gpio[20].line ~ package.IO20
    gpio[21].line ~ package.IO21
    # ~
    gpio[35].line ~ package.IO35
    gpio[36].line ~ package.IO36
    gpio[37].line ~ package.IO37
    gpio[38].line ~ package.IO38
    gpio[39].line ~ package.IO39
    gpio[40].line ~ package.IO40
    gpio[41].line ~ package.IO41
    gpio[42].line ~ package.IO42
    gpio[43].line ~ package.RXD0
    gpio[44].line ~ package.TXD0
    # ~
    gpio[45].line ~ package.IO45 # strapping pin, default pull-down
    gpio[46].line ~ package.IO46 # strapping pin, default pull-down
    gpio[47].line ~ package.IO47
    gpio[48].line ~ package.IO48

    power.hv ~ package.P3V3
    power.lv ~ package.GND

    enable.line ~ package.EN

    uart.rx ~ gpio[44]
    uart.tx ~ gpio[43]

    usb.usb_if.d.n ~ gpio[19]
    usb.usb_if.d.p ~ gpio[20]

    spi.sclk ~ gpio[12]
    spi.mosi ~ gpio[11]
    spi.miso ~ gpio[13]
    spi_cs ~ gpio[10]

    jtag.tck ~ gpio[39]
    jtag.tms ~ gpio[42]
    jtag.tdi ~ gpio[41]
    jtag.tdo ~ gpio[40]
    jtag.vtref ~ power
    jtag.n_trst ~ enable

    # parameters
    power.voltage = 3.3V +/- 10%

    power.required = True
