#pragma experiment("BRIDGE_CONNECT")
#pragma experiment("FOR_LOOP")

import Analog_Devices_ADM2587EBRWZ_ReferenceDesign
import RS485_Bus_Protection
import UART_Base, RS485HalfDuplex, ElectricLogic, ElectricPower, UART_RS485
import Resistor, Capacitor

from "parts/Chipanalog_CA_IS2092A/Chipanalog_CA_IS2092A.ato" import Chipanalog_CA_IS2092A_package
from "parts/MaxLinear_SP3485EN_L_TR/MaxLinear_SP3485EN_L_TR.ato" import MaxLinear_SP3485EN_L_TR_package

module Analog_Devices_ADM2587EBRWZ_driver from Analog_Devices_ADM2587EBRWZ_ReferenceDesign:
    """Isolated UART to half duplex RS485 interface"""

    # external interfaces
    power_unisolated = new ElectricPower
    power_isolated_out = new ElectricPower
    power_isolated_in = new ElectricPower
    uart = new UART_Base
    read_enable = new ElectricLogic
    write_enable = new ElectricLogic
    rs485 = new RS485HalfDuplex

    # connections
    power_unisolated ~ transceiver.power_unisolated
    power_isolated_out ~ transceiver.power_isolated_out
    power_isolated_in ~ transceiver.power_isolated_in
    uart ~ transceiver.uart
    read_enable ~ transceiver.read_enable
    write_enable ~ transceiver.write_enable
    rs485 ~ transceiver.rs485

    # parameters
    power_unisolated.required = True
    uart.required = True
    read_enable.required = True
    write_enable.required = True
    rs485.required = True


module RS485BusProtection from RS485_Bus_Protection:
    """
    RS485 bus protection.
    - Overvoltage protection
    - Overcurrent protection
    - Common mode filter
    - Termination resistor
    - ESD protection
    - Lightning protection

    based on: https://www.mornsun-power.com/public/uploads/pdf/TD(H)541S485H.pdf
    """

    # parameters
    power.required = True
    rs485_unprotected.required = True
    rs485_protected.required = True
    earth.required = True


module MaxLinear_SP3485EN_driver from UART_RS485:
    """
    Simple UART to RS485 converter.
    UART and write enable interface in, RS485 interface out.
    """
    # components
    package = new MaxLinear_SP3485EN_L_TR_package
    termination_resistor = new Resistor
    bypass_capacitor = new Capacitor

    # external interfaces
    uart = new UART_Base
    rs485 = new RS485HalfDuplex
    power = new ElectricPower

    # connections to package
    package.A ~> rs485.diff_pair.p.line
    package.B ~> rs485.diff_pair.n.line
    package.DI ~> uart.tx.line
    package.RO ~> uart.rx.line
    package.nRE ~> read_enable.line
    package.DE ~> write_enable.line
    package.VCC ~> power.hv
    package.GND ~> power.lv

    # connections
    rs485.diff_pair.p.line ~> termination_resistor ~> rs485.diff_pair.n.line
    power ~ bypass_capacitor.power

    # parametrization
    termination_resistor.resistance = 120ohm +/- 1%
    termination_resistor.package = "R0402"
    bypass_capacitor.value = 100nF +/- 20%
    bypass_capacitor.package = "C0402"

    power.required = True
    uart.required = True
    rs485.required = True
    write_enable.required = True
    read_enable.required = True


module Chipanalog_IS2092A_driver from UART_RS485:
    """
    Isolated powered UART to RS485 transceiver design block.
    - 3.3V or 5V logic power
    - 3.3V or 5V module power
    - 0.5 Mbps UART
    - Read enable/write enable input
    - RS485 half duplex
    - ANSI/ESDA/JEDEC JS-001 ESD protection
    - JESD22-C101 CDM protection
    """

    # components
    package = new Chipanalog_CA_IS2092A_package
    power_decoupling_capacitors_small = new Capacitor[2]
    power_decoupling_capacitors_big = new Capacitor[2]
    logic_decoupling_capacitors = new Capacitor[2]

    # external interfaces (not in UART_RS485)
    power_logic = new ElectricPower
    power_isolated_out = new ElectricPower
    power_isolated_in = new ElectricPower
    voltage_select = new ElectricLogic
    # Output voltage power_isolated_out/in select pin:
    # power_isolated_out/in =5.0 V when voltage_select is shorted to power_isolated_in.hv;
    # power_isolated_out/in =3.3 V when voltage_select is shorted to power_isolated_out.lv or floating;
    # To improve the system's anti-interference ability, it is not recommended to float the voltage_select pins

    # connections to package
    rs485.diff_pair.p.line ~ package.A
    rs485.diff_pair.n.line ~ package.B
    write_enable.line ~ package.DE
    uart.tx.line ~ package.DI
    power.lv ~ package.GND1
    power_logic.lv ~ package.GND1
    power_isolated_in.lv ~ package.GND2
    power_isolated_out.lv ~ package.GND2
    read_enable.line ~ package.nRE
    uart.rx.line ~ package.RO
    voltage_select.line ~ package.SEL
    power_logic.hv ~ package.VDDL
    power.hv ~ package.VDDP
    power_isolated_in.hv ~ package.VISOIN
    power_isolated_out.hv ~ package.VISOOUT

    # connections
    power.lv ~ power_logic.lv
    power_isolated_out.lv ~ power_isolated_in.lv

    # parameters
    assert power_isolated_out.voltage within 3.3V to 5.5V

    # connections
    power_isolated_out ~ power_decoupling_capacitors_big[1].power
    power_isolated_out ~ power_decoupling_capacitors_small[1].power
    power_isolated_in ~ logic_decoupling_capacitors[1].power
    power_isolated_out ~ power_isolated_in

    power ~ power_decoupling_capacitors_big[0].power
    power ~ power_decoupling_capacitors_small[0].power
    power_logic ~ logic_decoupling_capacitors[0].power

    # parameters
    assert power.voltage within 3.3V to 5.5V
    assert power_logic.voltage within 3.0V to 5.5V

    for cap in power_decoupling_capacitors_big:
        cap.capacitance = 10uF +/- 20%
        cap.package = "C0402"

    for cap in power_decoupling_capacitors_small:
        cap.capacitance = 100nF +/- 20%
        cap.package = "C0402"

    for cap in logic_decoupling_capacitors:
        cap.capacitance = 1uF +/- 20%
        cap.package = "C0402"

    power.required = True
    power_logic.required = True
    uart.required = True
    rs485.required = True
    read_enable.required = True
    write_enable.required = True
    voltage_select.required = True
